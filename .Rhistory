library(faraway)
library(tidyr)
suicide_data <- suicide
head(suicide_data)
suicide_wide <- spread(suicide_data, sex, y)
suicide_wide
data_sep
group_by(data_sep, "IP")
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
test1 <- spread(data_sep, "IP")
group_by(test1, IP )
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
test1 <- spread(data_sep, "IP")
spread(data_sep, IP)
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
group_by(data_sep, IP )
group_by(data_sep, IP) %>% summarise(Port = paste(year, collapse=", "))
group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=", "))
group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
test1 <- group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
test1[1, :] <- unique(test[1: ])
test1[1, :] <- unique(test[1, : ])
unique(c(2, 2, 1))
sapply(test1$Port, unique)
# Remove duplicates with sapply()
test1$Port <- sapply(test1$Port, unique)
test1
test1 <- group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
# Remove duplicates with sapply()
test1$Port <- sapply(test1$Port, unique)
test1$Port
test1
unique(test1[c("IP", "Port")])
str(test1)
as.numeric(test1$Port)
data2
test1 <- group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
test1
install.packages("reticulate")
library(reticulate)
library(reticulate)
library(reticulate)
import pandas as pd
import numpy as np
import seaborn as sb
meow = np.array([[-1,1,1],[1,1,-1],[1,1,1]])
print(meow)
food_choices <- c("Pizza", "Pasta", "Sushi", "Caesar Salad")
counts <- c(17, 10, 8, 11)
table <- data.frame(food_choices, counts) # Create data frame
# Check table:
table
# Check structure of table:
str(table)
# Total Counts In Survey:
total_count <- sum(table[,2])
total_count
## Base R Pie Chart With Labels:
pie(table[, 2], labels = table[,1],
col = c("Blue", "Red", "Green", "Orange"),
main = "Favourite Foods Survey")
library(ggplot2)
# Why Barplot Is Not A Good Visual:
ggplot(table, aes(x = "", y = Count, fill = Food)) +
geom_bar(width = 1, stat = "identity")
# Why Barplot Is Not A Good Visual:
ggplot(table, aes(x = "", y = counts, fill = Food)) +
geom_bar(width = 1, stat = "identity")
# Why Barplot Is Not A Good Visual:
ggplot(table, aes(x = "", y = counts, fill = food_choices)) +
geom_bar(width = 1, stat = "identity")
install.packages("moments")
library(devtools)
install_github("knitron", "fhirschmann")
install.packages("devtools")
library(devtools)
install_github("knitron", "fhirschmann")
library(faraway)
# If you need to install Quandl:
# install.packages("Quandl")
# Loading Financial data With Quandl:
library(Quandl)
library(ggplot2)
library(plotly)
library(dplyr)
# Helpful Youtube guide: https://www.youtube.com/watch?v=qg5alOoczNo
# https://www.quandl.com/tools/r
# Authorization (Set your own API key):
Quandl.api_key("A7CUbSQwdYgJcFLdpQcR")
### Look at some data:
# 1)
clarkson_ny_prices <- Quandl("ZILLOW/C3821_ZHVITT")
# Preview data:
head(clarkson_ny_prices)
tail(clarkson_ny_prices)
# A simple plotly Plot:
plot_ly(data = clarkson_ny_prices, x = ~Date, y = ~Value) %>%
add_lines(y = clarkson_ny_prices$Value) %>%
layout(xaxis = list(title = "\n Date", titlefont = "Courier New, monospace"),
yaxis = list(title = "Price \n",
titlefont = "Courier New, monospace"),
title = "Zillow's Home Value Index For Clarkson, NY \n")
#------------------------
# 2) Platinum Prices From Johnson Matthey Database:
plat_prices <- Quandl("JOHNMATT/PLAT")
head(plat_prices)
tail(plat_prices)
# Rename columns:
colnames(plat_prices) <- c("Date", "HK_0830", "HK_1400", "LDN_0800", "NY_0930", "NY_1500")
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
geom_line(aes(y = HK_1400), col = "green") +
geom_line(aes(y = LDN_0800), col = "red") +
geom_line(aes(y = NY_0930), col = "blue") +
geom_line(aes(y = NY_1500), col = "brown") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# If you need to install Quandl:
# install.packages("Quandl")
# Loading Financial data With Quandl:
library(Quandl)
library(ggplot2)
library(plotly)
library(dplyr)
# Helpful Youtube guide: https://www.youtube.com/watch?v=qg5alOoczNo
# https://www.quandl.com/tools/r
# Authorization (Set your own API key):
Quandl.api_key("A7CUbSQwdYgJcFLdpQcR")
### Look at some data:
# 1)
clarkson_ny_prices <- Quandl("ZILLOW/C3821_ZHVITT")
# Preview data:
head(clarkson_ny_prices)
tail(clarkson_ny_prices)
# A simple plotly Plot:
plot_ly(data = clarkson_ny_prices, x = ~Date, y = ~Value) %>%
add_lines(y = clarkson_ny_prices$Value) %>%
layout(xaxis = list(title = "\n Date", titlefont = "Courier New, monospace"),
yaxis = list(title = "Price \n",
titlefont = "Courier New, monospace"),
title = "Zillow's Home Value Index For Clarkson, NY \n")
#------------------------
# 2) Platinum Prices From Johnson Matthey Database:
plat_prices <- Quandl("JOHNMATT/PLAT")
head(plat_prices)
tail(plat_prices)
# Rename columns:
colnames(plat_prices) <- c("Date", "HK_0830", "HK_1400", "LDN_0800", "NY_0930")
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
geom_line(aes(y = HK_1400), col = "green") +
geom_line(aes(y = LDN_0800), col = "red") +
geom_line(aes(y = NY_0930), col = "blue") +
geom_line(aes(y = NY_1500), col = "brown") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# If you need to install Quandl:
# install.packages("Quandl")
# Loading Financial data With Quandl:
library(Quandl)
library(ggplot2)
library(plotly)
library(dplyr)
# Helpful Youtube guide: https://www.youtube.com/watch?v=qg5alOoczNo
# https://www.quandl.com/tools/r
# Authorization (Set your own API key):
Quandl.api_key("A7CUbSQwdYgJcFLdpQcR")
### Look at some data:
# 1)
clarkson_ny_prices <- Quandl("ZILLOW/C3821_ZHVITT")
# Preview data:
head(clarkson_ny_prices)
tail(clarkson_ny_prices)
# A simple plotly Plot:
plot_ly(data = clarkson_ny_prices, x = ~Date, y = ~Value) %>%
add_lines(y = clarkson_ny_prices$Value) %>%
layout(xaxis = list(title = "\n Date", titlefont = "Courier New, monospace"),
yaxis = list(title = "Price \n",
titlefont = "Courier New, monospace"),
title = "Zillow's Home Value Index For Clarkson, NY \n")
#------------------------
# 2) Platinum Prices From Johnson Matthey Database:
plat_prices <- Quandl("JOHNMATT/PLAT")
head(plat_prices)
tail(plat_prices)
# Rename columns:
colnames(plat_prices) <- c("Date", "HK_0830", "HK_1400", "LDN_0800", "NY_0930")
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
geom_line(aes(y = HK_1400), col = "green") +
geom_line(aes(y = LDN_0800), col = "red") +
geom_line(aes(y = NY_0930), col = "blue") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
103 * 0.03
106.29*0.03
106.29 + 3.19
1.05^4 * 100
1.02^20 * 7000
0.05/12
0.06/12
1.005^3 * 14000
0.06/12
103 * 0.03
1.02^20 & 7000
1.02^20 * 7000
1.005^5 * 14000
install.packages("xts")
install.packages("zoo")
data(sunspots)
class(sunspots)
sunspots_xts <- as.xts(sunspots)
library(xts)
sunspots_xts <- as.xts(sunspots)
class(sunspots_xts)
head(sunspots_xts)
iday["20160808T2213"]
library(ggplot2)
# White Noise is a very simple stationary process.
# Weak white noise has a fixed constant mean, a fixed constant variance and
# no correlation over time.
# Simulate 1000 observations in White Noise model.
wn_sim <- arima.sim(model = list(order = c(0, 0, 0)), n = 1000)
head(wn_sim)
seq(0, 50, 1)
wn_sim <- arima.sim(model = list(order = c(0, 0, 0)), n = 1000)
head(wn_sim)
ts_wn <- data.frame(Time = seq(0, 50, 1), WN = wn_sim)
head(ts_wn)
ts_wn <- data.frame(Time = seq(0, 49, 1), WN = wn_sim)
head(ts_wn)
# Ggplot2 of Simulated white noise observations:
ggplot(data = ts_wn, aes(x = Time, y = WN)) +
geom_line()
# Ggplot2 of Simulated white noise observations:
ggplot(data = ts_wn, aes(x = Time, y = WN)) +
geom_line() +
geom_point()
ggplot(data = ts_wn, aes(x = Time, y = WN)) +
geom_line() +
geom_point() +
labs(x = "Word \n", y = "\n Count ", title = "The 15 Most Common Words In \n Green Eggs And Ham \n (No Stopwords) \n") +
geom_text(aes(label = n), hjust = 1, colour = "white", fontface = "bold", size = 3.5) +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12)
)
# Ggplot2 of Simulated white noise observations:
ggplot(data = ts_wn, aes(x = Time, y = WN)) +
geom_line() +
geom_point() +
labs(x = "Word \n", y = "\n Count ", title = "The 15 Most Common Words In \n Green Eggs And Ham \n (No Stopwords) \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
# Ggplot2 of Simulated white noise observations:
ggplot(data = ts_wn, aes(x = Time, y = WN)) +
geom_line() +
geom_point() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
# Simulate 1000 observations in White Noise model.
wn_sim <- arima.sim(model = list(order = c(0, 0, 0)), n = 1000)
head(wn_sim)
ts_wn <- data.frame(Time = seq(0, 999, 1), WN = wn_sim)
head(ts_wn); tail(ts_wn)
# Ggplot2 of Simulated white noise observations:
ggplot(data = ts_wn, aes(x = Time, y = WN)) +
geom_line() +
geom_point() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
# Ggplot2 of Simulated white noise observations:
ggplot(data = ts_wn, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
### Simulate 100,000 observations in White Noise model.
wn_sim100000 <- arima.sim(model = list(order = c(0, 0, 0)), n = 100000)
head(wn_sim100000)
ts_wn100000 <- data.frame(Time = seq(0, 99999, 1), WN = wn_sim)
head(ts_wn100000); tail(ts_wn100000)
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn100000, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
### Simulate 100,000 observations in White Noise model.
wn_sim100000 <- arima.sim(model = list(order = c(0, 0, 0)), n = 100000)
head(wn_sim100000)
ts_wn100000 <- data.frame(Time = seq(0, 99999, 1), WN = wn_sim100000)
head(ts_wn100000); tail(ts_wn100000)
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn100000, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
### Simulate 10000 observations in White Noise model.
wn_sim10000 <- arima.sim(model = list(order = c(0, 0, 0)), n = 10000)
head(wn_sim10000)
ts_wn100000 <- data.frame(Time = seq(0, 9999, 1), WN = wn_sim10000)
head(ts_wn10000); tail(ts_wn10000)
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn10000, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
# Simulating White Noise (Time Series)
# Reference: Datacamp Slides
# In the slides, a base R graphics plot is used. I want to use ggplot2 as ggplot2 looks
# nicer.
library(ggplot2)
# White Noise is a very simple stationary process.
# Weak white noise has a fixed constant mean, a fixed constant variance and
# no correlation over time.
#### Simulate 100 observations in White Noise model.
wn_sim_100 <- arima.sim(model = list(order = c(0, 0, 0)), n = 100)
head(wn_sim)
ts_wn100 <- data.frame(Time = seq(0, 99, 1), WN = wn_sim100)
head(ts_wn100); tail(ts_wn100)
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn100, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
# White Noise is a very simple stationary process.
# Weak white noise has a fixed constant mean, a fixed constant variance and
# no correlation over time.
#### Simulate 100 observations in White Noise model.
wn_sim_100 <- arima.sim(model = list(order = c(0, 0, 0)), n = 100)
head(wn_sim)
ts_wn100 <- data.frame(Time = seq(0, 99, 1), WN = wn_sim_100)
head(ts_wn100); tail(ts_wn100)
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn100, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
### Simulate 10000 observations in White Noise model.
wn_sim10000 <- arima.sim(model = list(order = c(0, 0, 0)), n = 10000)
head(wn_sim10000)
ts_wn100000 <- data.frame(Time = seq(0, 9999, 1), WN = wn_sim10000)
head(ts_wn10000); tail(ts_wn10000)
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn10000, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
### Simulate 10000 observations in White Noise model.
wn_sim10000 <- arima.sim(model = list(order = c(0, 0, 0)), n = 10000)
head(wn_sim10000)
ts_wn10000 <- data.frame(Time = seq(0, 9999, 1), WN = wn_sim10000)
head(ts_wn10000); tail(ts_wn10000)
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn10000, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
# Simulate 50 observations from the WN model with mean = 2, sd = 2v(var = 4)
wn_2 <- arima.sim(model = list(order = c(0, 0, 0)), n = 50, mean = 4, sd = 2)
head(wn_2)
ts_wn_2 <- data.frame(Time = seq(0, 49, 1), WN = wn_2)
head(ts_wn_2); tail(ts_wn_2)
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn_2, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn_2, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process (Mean = 4, SD = 2) \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn_2, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A \n White Noise Process (Mean = 4, SD = 2) \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12))
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn_2, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A \n White Noise Process (Mean = 4, SD = 2) \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12),
axis.title.y = element_text(face="bold", colour="darkblue", size = 12))
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn10000, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A White Noise Process \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12),
axis.title.y = element_text(face="bold", colour="darkblue", size = 12))
# Simulating observations from white noise model with different means and variance.
# Simulate 50 observations from the WN model with mean = 2, sd = 2v(var = 4)
wn_2 <- arima.sim(model = list(order = c(0, 0, 0)), n = 50, mean = 4, sd = 2)
head(wn_2)
ts_wn_2 <- data.frame(Time = seq(0, 49, 1), WN = wn_2)
head(ts_wn_2); tail(ts_wn_2)
# Ggplot2 line plot of simulated white noise observations:
ggplot(data = ts_wn_2, aes(x = Time, y = WN)) +
geom_line() +
labs(x = "\n Time ", y = "WN \n", title = "Simulated Observations From A \n White Noise Process (Mean = 4, SD = 2) \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.ticks.x = element_blank(),
axis.title.x = element_text(face="bold", colour="darkblue", size = 12),
axis.title.y = element_text(face="bold", colour="darkblue", size = 12))
arima(wn_2, order = c(0, 0, 0))
# Mean and variance of white noise:
mean(wn_2)
var(wn_2)
data(Mishkin, package = "Ecdat")
inflation <- as.ts(Mishkin[, 1])
ts.plot(inflation) ; acf(inflation)
install.packages("Ecdat")
data(Mishkin, package = "Ecdat")
inflation <- as.ts(Mishkin[, 1])
ts.plot(inflation) ; acf(inflation)
inflation
install.packages("ggfortify")
autoplot(inflation)
head(inflation)
inflation
years <- rownames(inflation)
years
row.names(inflation)
setwd("~/dkmathstats_site")
rmarkdown::render_site()
rmarkdown::render_site()
