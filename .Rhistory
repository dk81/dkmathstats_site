granularity = 60
} else if (timeframe == "daily"){
granularity = 1440
} else if (timeframe == "weekly") {
granularity = 1440 * 7
} else {
print("Please enter one of hourly, daily or weekly for the timeframe.")
}
# Obtain data with URL:
url = glue("https://api.kraken.com/0/public/OHLC?pair={crypto_pair}&interval={granularity}")
columnNames <- c('unix', 'open', 'high', 'low', 'close', 'vwap', 'volume', 'tradecount', 'misc')
mydata <- fromJSON(url)
df <- as.data.frame(mydata['result'])
# Rename columns and remove misc Column
colnames(df) <- columnNames
df <- subset(df, select=-c(misc))
# Convert to numeric columns:
df[, c(1:7)] <- sapply(df[, c(1:7)], as.numeric)
# Create Volume column where volume = close price * Volume
df$USD_Volume <- with(df, df$volume * df$close)
# Unix Epoch timestamp into UTC timezone:
df$date <- anytime(df$unix, asUTC = TRUE)
# Add RSI column based on closing prices:
# RSI(price, n = num_periods for MAvg, maType)
# Overbought/oversold (over 70/below 30)
df$rsi <- TTR::RSI(df$close, rsi_timeframe)
### Plotly plots: closing prices and Volume:
# Reference: https://quantnomad.com/2019/04/22/example-of-candlestick-chart-in-r-using-plotly/
# Line Chart
plot1 <- df %>% plot_ly(x = ~date, y = ~close, type = 'scatter', mode = 'lines', name = 'Close Price')
# RSI - Relative Strength Index on Closing Price:
plot2 <- df %>% plot_ly(x = ~date, y = ~rsi, type = 'scatter', mode = 'lines', name = 'RSI') %>%
add_lines(x = ~date, y = 30,
line = list(color = "lightblue", width = 2),
showlegend = FALSE) %>%
add_lines(x = ~date, y = 70,
line = list(color = "lightblue", width = 2),
showlegend = FALSE)
#Subplots:
crypto_plot <- subplot(plot1, plot2, nrows = 2, shareX = TRUE, heights = c(0.7, 0.3)) %>%
layout(title = paste0("Price of ", crypto_pair),
xaxis = list(title = "\n Date"),
yaxis = list(title = "Closing Price \n"),
autosize = TRUE, width = 900, height = 600)
return(crypto_plot)
}
function(crypto_pair = 'ETHUSDT', timeframe = 'daily', rsi_timeframe = 14)
.
# Filter by crypto ticker
# Filter by daily or hourly data
library(dplyr)
library(tidyr)
library(plotly)
library(pracma)
library(TTR)
library(anytime)
# Test
# Filter by crypto ticker
# Filter by daily or hourly data
library(dplyr)
library(tidyr)
library(plotly)
library(pracma)
library(TTR)
library(anytime)
# Test out one instance:
link <- "https://www.cryptodatadownload.com/cdd/gemini_BTCUSD_day.csv"
# Read in data
df <- read.csv(link, skip = 1)
df$Date <- as.Date(df$Date)
# Add a Simple Moving Average Column:
df$sma = movavg(df$Close, n = 200, type = "s")
# Add RSI column
df$rsi <- RSI(df$Close, 14)
# Candlestick Price Chart
# Reference: https://plotly.com/r/candlestick-charts/
# Reference 2: https://quantnomad.com/2019/04/22/example-of-candlestick-chart-in-r-using-plotly/
chart <- df %>% plot_ly(x = ~date, type = "candlestick",
open = ~open, close = ~close,
low = ~low, high = ~high)
chart <- chart %>% layout(title = "Candlestick Chart Test of BTC_USDT")
chart <- chart %>% plot_ly(x = ~date, type = "line",
y = ~sma)
## OKEx test:
okex_link <- "https://www.cryptodatadownload.com/cdd/Okex_ETHBTC_d.csv"
# Read in data
okex_df <- read.csv(okex_link, skip = 1)
str(okex_df)
## FTX Test:
ftx_link <- "https://www.cryptodatadownload.com/cdd/FTX_BTCUSDT_d.csv"
# Read in data
ftx_df <- read.csv(ftx_link, skip = 1)
## Bittrex Test:
bittrex_link <- "https://www.cryptodatadownload.com/cdd/Bittrex_BTCUSD_d.csv"
# Read in data
bittrex_df <- read.csv(ftx_link, skip = 1)
# Changing:
bittrex_df$date <- as.Date(bittrex_df$date)
# Add a Simple Moving Average Column:
bittrex_df$sma = movavg(bittrex_df$close, n = 200, type = "s")
# Add RSI column
bittrex_df$rsi <- RSI(bittrex_df$close, 14)
chart <- bittrex_df %>% plot_ly(x = ~date, type = "candlestick",
open = ~open, close = ~close,
low = ~low, high = ~high)
chart <- chart %>% layout(title = "Candlestick Chart Test of BTC_USDT")
chart <- chart %>% plot_ly(x = ~date, type = "line",
y = ~sma)
# Coinbase
# Obtain url given the crypto pair
pair <- "SOL-USD"
url = glue("https://api.pro.coinbase.com/products/{pair}/candles?granularity=86400")
crypto_data <- fromJSON(url)
df <- as.data.frame(crypto_data)
# Renaming column names:
columnNames <- c('unix', 'low', 'high', 'open', 'close', 'volume')
colnames(df) <- columnNames
paste0("https://api.pro.coinbase.com/products/", pair, "/candles?granularity=86400")
# Kraken Test:
produce_crypto_chart <- function(crypto_pair, timeframe = 'daily', rsi_timeframe = 14) {
if (timeframe == "hourly"){
granularity = 60
} else if (timeframe == "daily"){
granularity = 1440
} else if (timeframe == "weekly") {
granularity = 1440 * 7
} else {
print("Please enter one of hourly, daily or weekly for the timeframe.")
}
# Obtain data with URL:
url = glue("https://api.kraken.com/0/public/OHLC?pair={crypto_pair}&interval={granularity}")
columnNames <- c('unix', 'open', 'high', 'low', 'close', 'vwap', 'volume', 'tradecount', 'misc')
mydata <- fromJSON(url)
df <- as.data.frame(mydata['result'])
# Rename columns and remove misc Column
colnames(df) <- columnNames
df <- subset(df, select=-c(misc))
# Convert to numeric columns:
df[, c(1:7)] <- sapply(df[, c(1:7)], as.numeric)
# Create Volume column where volume = close price * Volume
df$USD_Volume <- with(df, df$volume * df$close)
# Unix Epoch timestamp into UTC timezone:
df$date <- anytime(df$unix, asUTC = TRUE)
# Add RSI column based on closing prices:
# RSI(price, n = num_periods for MAvg, maType)
# Overbought/oversold (over 70/below 30)
df$rsi <- TTR::RSI(df$close, rsi_timeframe)
### Plotly plots: closing prices and Volume:
# Reference: https://quantnomad.com/2019/04/22/example-of-candlestick-chart-in-r-using-plotly/
# Line Chart
plot1 <- df %>% plot_ly(x = ~date, y = ~close, type = 'scatter', mode = 'lines', name = 'Close Price')
# RSI - Relative Strength Index on Closing Price:
plot2 <- df %>% plot_ly(x = ~date, y = ~rsi, type = 'scatter', mode = 'lines', name = 'RSI') %>%
add_lines(x = ~date, y = 30,
line = list(color = "lightblue", width = 2),
showlegend = FALSE) %>%
add_lines(x = ~date, y = 70,
line = list(color = "lightblue", width = 2),
showlegend = FALSE)
#Subplots:
crypto_plot <- subplot(plot1, plot2, nrows = 2, shareX = TRUE, heights = c(0.7, 0.3)) %>%
layout(title = paste0("Price of ", crypto_pair),
xaxis = list(title = "\n Date"),
yaxis = list(title = "Closing Price \n"),
autosize = TRUE, width = 900, height = 600)
return(crypto_plot)
}
function(crypto_pair = 'ETHUSDT', timeframe = 'daily', rsi_timeframe = 14)
.
produce_crypto_chart(crypto_pair = 'ETHUSDT', timeframe = 'daily', rsi_timeframe = 14)
# Test
# Filter by crypto ticker
# Filter by daily or hourly data
library(dplyr)
library(tidyr)
library(plotly)
library(pracma)
library(TTR)
library(anytime)
library(glue)
# Test out one instance:
link <- "https://www.cryptodatadownload.com/cdd/gemini_BTCUSD_day.csv"
# Read in data
df <- read.csv(link, skip = 1)
df$Date <- as.Date(df$Date)
# Add a Simple Moving Average Column:
df$sma = movavg(df$Close, n = 200, type = "s")
# Add RSI column
df$rsi <- RSI(df$Close, 14)
# Candlestick Price Chart
# Reference: https://plotly.com/r/candlestick-charts/
# Reference 2: https://quantnomad.com/2019/04/22/example-of-candlestick-chart-in-r-using-plotly/
chart <- df %>% plot_ly(x = ~date, type = "candlestick",
open = ~open, close = ~close,
low = ~low, high = ~high)
chart <- chart %>% layout(title = "Candlestick Chart Test of BTC_USDT")
chart <- chart %>% plot_ly(x = ~date, type = "line",
y = ~sma)
## OKEx test:
okex_link <- "https://www.cryptodatadownload.com/cdd/Okex_ETHBTC_d.csv"
# Read in data
okex_df <- read.csv(okex_link, skip = 1)
str(okex_df)
## FTX Test:
ftx_link <- "https://www.cryptodatadownload.com/cdd/FTX_BTCUSDT_d.csv"
# Read in data
ftx_df <- read.csv(ftx_link, skip = 1)
## Bittrex Test:
bittrex_link <- "https://www.cryptodatadownload.com/cdd/Bittrex_BTCUSD_d.csv"
# Read in data
bittrex_df <- read.csv(ftx_link, skip = 1)
# Changing:
bittrex_df$date <- as.Date(bittrex_df$date)
# Add a Simple Moving Average Column:
bittrex_df$sma = movavg(bittrex_df$close, n = 200, type = "s")
# Add RSI column
bittrex_df$rsi <- RSI(bittrex_df$close, 14)
chart <- bittrex_df %>% plot_ly(x = ~date, type = "candlestick",
open = ~open, close = ~close,
low = ~low, high = ~high)
chart <- chart %>% layout(title = "Candlestick Chart Test of BTC_USDT")
chart <- chart %>% plot_ly(x = ~date, type = "line",
y = ~sma)
# Coinbase
# Obtain url given the crypto pair
pair <- "SOL-USD"
url = glue("https://api.pro.coinbase.com/products/{pair}/candles?granularity=86400")
crypto_data <- fromJSON(url)
df <- as.data.frame(crypto_data)
# Renaming column names:
columnNames <- c('unix', 'low', 'high', 'open', 'close', 'volume')
colnames(df) <- columnNames
paste0("https://api.pro.coinbase.com/products/", pair, "/candles?granularity=86400")
# Kraken Test:
produce_crypto_chart <- function(crypto_pair, timeframe = 'daily', rsi_timeframe = 14) {
if (timeframe == "hourly"){
granularity = 60
} else if (timeframe == "daily"){
granularity = 1440
} else if (timeframe == "weekly") {
granularity = 1440 * 7
} else {
print("Please enter one of hourly, daily or weekly for the timeframe.")
}
# Obtain data with URL:
url = glue("https://api.kraken.com/0/public/OHLC?pair={crypto_pair}&interval={granularity}")
columnNames <- c('unix', 'open', 'high', 'low', 'close', 'vwap', 'volume', 'tradecount', 'misc')
mydata <- fromJSON(url)
df <- as.data.frame(mydata['result'])
# Rename columns and remove misc Column
colnames(df) <- columnNames
df <- subset(df, select=-c(misc))
# Convert to numeric columns:
df[, c(1:7)] <- sapply(df[, c(1:7)], as.numeric)
# Create Volume column where volume = close price * Volume
df$USD_Volume <- with(df, df$volume * df$close)
# Unix Epoch timestamp into UTC timezone:
df$date <- anytime(df$unix, asUTC = TRUE)
# Add RSI column based on closing prices:
# RSI(price, n = num_periods for MAvg, maType)
# Overbought/oversold (over 70/below 30)
df$rsi <- TTR::RSI(df$close, rsi_timeframe)
### Plotly plots: closing prices and Volume:
# Reference: https://quantnomad.com/2019/04/22/example-of-candlestick-chart-in-r-using-plotly/
# Line Chart
plot1 <- df %>% plot_ly(x = ~date, y = ~close, type = 'scatter', mode = 'lines', name = 'Close Price')
# RSI - Relative Strength Index on Closing Price:
plot2 <- df %>% plot_ly(x = ~date, y = ~rsi, type = 'scatter', mode = 'lines', name = 'RSI') %>%
add_lines(x = ~date, y = 30,
line = list(color = "lightblue", width = 2),
showlegend = FALSE) %>%
add_lines(x = ~date, y = 70,
line = list(color = "lightblue", width = 2),
showlegend = FALSE)
#Subplots:
crypto_plot <- subplot(plot1, plot2, nrows = 2, shareX = TRUE, heights = c(0.7, 0.3)) %>%
layout(title = paste0("Price of ", crypto_pair),
xaxis = list(title = "\n Date"),
yaxis = list(title = "Closing Price \n"),
autosize = TRUE, width = 900, height = 600)
return(crypto_plot)
}
produce_crypto_chart(crypto_pair = 'ETHUSDT', timeframe = 'daily', rsi_timeframe = 14)
# Test
# Filter by crypto ticker
# Filter by daily or hourly data
library(dplyr)
library(tidyr)
library(plotly)
library(pracma)
library(TTR)
library(anytime)
library(glue)
library(fromJSON)
# Test out one instance:
link <- "https://www.cryptodatadownload.com/cdd/gemini_BTCUSD_day.csv"
# Read in data
df <- read.csv(link, skip = 1)
df$Date <- as.Date(df$Date)
# Add a Simple Moving Average Column:
df$sma = movavg(df$Close, n = 200, type = "s")
# Add RSI column
df$rsi <- RSI(df$Close, 14)
# Candlestick Price Chart
# Reference: https://plotly.com/r/candlestick-charts/
# Reference 2: https://quantnomad.com/2019/04/22/example-of-candlestick-chart-in-r-using-plotly/
chart <- df %>% plot_ly(x = ~date, type = "candlestick",
open = ~open, close = ~close,
low = ~low, high = ~high)
chart <- chart %>% layout(title = "Candlestick Chart Test of BTC_USDT")
chart <- chart %>% plot_ly(x = ~date, type = "line",
y = ~sma)
## OKEx test:
okex_link <- "https://www.cryptodatadownload.com/cdd/Okex_ETHBTC_d.csv"
# Read in data
okex_df <- read.csv(okex_link, skip = 1)
str(okex_df)
## FTX Test:
ftx_link <- "https://www.cryptodatadownload.com/cdd/FTX_BTCUSDT_d.csv"
# Read in data
ftx_df <- read.csv(ftx_link, skip = 1)
## Bittrex Test:
bittrex_link <- "https://www.cryptodatadownload.com/cdd/Bittrex_BTCUSD_d.csv"
# Read in data
bittrex_df <- read.csv(ftx_link, skip = 1)
# Changing:
bittrex_df$date <- as.Date(bittrex_df$date)
# Add a Simple Moving Average Column:
bittrex_df$sma = movavg(bittrex_df$close, n = 200, type = "s")
# Add RSI column
bittrex_df$rsi <- RSI(bittrex_df$close, 14)
chart <- bittrex_df %>% plot_ly(x = ~date, type = "candlestick",
open = ~open, close = ~close,
low = ~low, high = ~high)
chart <- chart %>% layout(title = "Candlestick Chart Test of BTC_USDT")
chart <- chart %>% plot_ly(x = ~date, type = "line",
y = ~sma)
# Coinbase
# Obtain url given the crypto pair
pair <- "SOL-USD"
url = glue("https://api.pro.coinbase.com/products/{pair}/candles?granularity=86400")
crypto_data <- fromJSON(url)
df <- as.data.frame(crypto_data)
# Renaming column names:
columnNames <- c('unix', 'low', 'high', 'open', 'close', 'volume')
colnames(df) <- columnNames
paste0("https://api.pro.coinbase.com/products/", pair, "/candles?granularity=86400")
# Kraken Test:
produce_crypto_chart <- function(crypto_pair, timeframe = 'daily', rsi_timeframe = 14) {
if (timeframe == "hourly"){
granularity = 60
} else if (timeframe == "daily"){
granularity = 1440
} else if (timeframe == "weekly") {
granularity = 1440 * 7
} else {
print("Please enter one of hourly, daily or weekly for the timeframe.")
}
# Obtain data with URL:
url = glue("https://api.kraken.com/0/public/OHLC?pair={crypto_pair}&interval={granularity}")
columnNames <- c('unix', 'open', 'high', 'low', 'close', 'vwap', 'volume', 'tradecount', 'misc')
mydata <- fromJSON(url)
df <- as.data.frame(mydata['result'])
# Rename columns and remove misc Column
colnames(df) <- columnNames
df <- subset(df, select=-c(misc))
# Convert to numeric columns:
df[, c(1:7)] <- sapply(df[, c(1:7)], as.numeric)
# Create Volume column where volume = close price * Volume
df$USD_Volume <- with(df, df$volume * df$close)
# Unix Epoch timestamp into UTC timezone:
df$date <- anytime(df$unix, asUTC = TRUE)
# Add RSI column based on closing prices:
# RSI(price, n = num_periods for MAvg, maType)
# Overbought/oversold (over 70/below 30)
df$rsi <- TTR::RSI(df$close, rsi_timeframe)
### Plotly plots: closing prices and Volume:
# Reference: https://quantnomad.com/2019/04/22/example-of-candlestick-chart-in-r-using-plotly/
# Line Chart
plot1 <- df %>% plot_ly(x = ~date, y = ~close, type = 'scatter', mode = 'lines', name = 'Close Price')
# RSI - Relative Strength Index on Closing Price:
plot2 <- df %>% plot_ly(x = ~date, y = ~rsi, type = 'scatter', mode = 'lines', name = 'RSI') %>%
add_lines(x = ~date, y = 30,
line = list(color = "lightblue", width = 2),
showlegend = FALSE) %>%
add_lines(x = ~date, y = 70,
line = list(color = "lightblue", width = 2),
showlegend = FALSE)
#Subplots:
crypto_plot <- subplot(plot1, plot2, nrows = 2, shareX = TRUE, heights = c(0.7, 0.3)) %>%
layout(title = paste0("Price of ", crypto_pair),
xaxis = list(title = "\n Date"),
yaxis = list(title = "Closing Price \n"),
autosize = TRUE, width = 900, height = 600)
return(crypto_plot)
}
produce_crypto_chart(crypto_pair = 'ETHUSDT', timeframe = 'daily', rsi_timeframe = 14)
# Test
# Filter by crypto ticker
# Filter by daily or hourly data
library(dplyr)
library(tidyr)
library(plotly)
library(pracma)
library(TTR)
library(anytime)
library(glue)
library(jsonlite)
# Test out one instance:
link <- "https://www.cryptodatadownload.com/cdd/gemini_BTCUSD_day.csv"
# Read in data
df <- read.csv(link, skip = 1)
df$Date <- as.Date(df$Date)
# Add a Simple Moving Average Column:
df$sma = movavg(df$Close, n = 200, type = "s")
# Add RSI column
df$rsi <- RSI(df$Close, 14)
# Candlestick Price Chart
# Reference: https://plotly.com/r/candlestick-charts/
# Reference 2: https://quantnomad.com/2019/04/22/example-of-candlestick-chart-in-r-using-plotly/
chart <- df %>% plot_ly(x = ~date, type = "candlestick",
open = ~open, close = ~close,
low = ~low, high = ~high)
chart <- chart %>% layout(title = "Candlestick Chart Test of BTC_USDT")
chart <- chart %>% plot_ly(x = ~date, type = "line",
y = ~sma)
## OKEx test:
okex_link <- "https://www.cryptodatadownload.com/cdd/Okex_ETHBTC_d.csv"
# Read in data
okex_df <- read.csv(okex_link, skip = 1)
str(okex_df)
## FTX Test:
ftx_link <- "https://www.cryptodatadownload.com/cdd/FTX_BTCUSDT_d.csv"
# Read in data
ftx_df <- read.csv(ftx_link, skip = 1)
## Bittrex Test:
bittrex_link <- "https://www.cryptodatadownload.com/cdd/Bittrex_BTCUSD_d.csv"
# Read in data
bittrex_df <- read.csv(ftx_link, skip = 1)
# Changing:
bittrex_df$date <- as.Date(bittrex_df$date)
# Add a Simple Moving Average Column:
bittrex_df$sma = movavg(bittrex_df$close, n = 200, type = "s")
# Add RSI column
bittrex_df$rsi <- RSI(bittrex_df$close, 14)
chart <- bittrex_df %>% plot_ly(x = ~date, type = "candlestick",
open = ~open, close = ~close,
low = ~low, high = ~high)
chart <- chart %>% layout(title = "Candlestick Chart Test of BTC_USDT")
chart <- chart %>% plot_ly(x = ~date, type = "line",
y = ~sma)
# Coinbase
# Obtain url given the crypto pair
pair <- "SOL-USD"
url = glue("https://api.pro.coinbase.com/products/{pair}/candles?granularity=86400")
crypto_data <- fromJSON(url)
df <- as.data.frame(crypto_data)
# Renaming column names:
columnNames <- c('unix', 'low', 'high', 'open', 'close', 'volume')
colnames(df) <- columnNames
paste0("https://api.pro.coinbase.com/products/", pair, "/candles?granularity=86400")
# Kraken Test:
produce_crypto_chart <- function(crypto_pair, timeframe = 'daily', rsi_timeframe = 14) {
if (timeframe == "hourly"){
granularity = 60
} else if (timeframe == "daily"){
granularity = 1440
} else if (timeframe == "weekly") {
granularity = 1440 * 7
} else {
print("Please enter one of hourly, daily or weekly for the timeframe.")
}
# Obtain data with URL:
url = glue("https://api.kraken.com/0/public/OHLC?pair={crypto_pair}&interval={granularity}")
columnNames <- c('unix', 'open', 'high', 'low', 'close', 'vwap', 'volume', 'tradecount', 'misc')
mydata <- fromJSON(url)
df <- as.data.frame(mydata['result'])
# Rename columns and remove misc Column
colnames(df) <- columnNames
df <- subset(df, select=-c(misc))
# Convert to numeric columns:
df[, c(1:7)] <- sapply(df[, c(1:7)], as.numeric)
# Create Volume column where volume = close price * Volume
df$USD_Volume <- with(df, df$volume * df$close)
# Unix Epoch timestamp into UTC timezone:
df$date <- anytime(df$unix, asUTC = TRUE)
# Add RSI column based on closing prices:
# RSI(price, n = num_periods for MAvg, maType)
# Overbought/oversold (over 70/below 30)
df$rsi <- TTR::RSI(df$close, rsi_timeframe)
### Plotly plots: closing prices and Volume:
# Reference: https://quantnomad.com/2019/04/22/example-of-candlestick-chart-in-r-using-plotly/
# Line Chart
plot1 <- df %>% plot_ly(x = ~date, y = ~close, type = 'scatter', mode = 'lines', name = 'Close Price')
# RSI - Relative Strength Index on Closing Price:
plot2 <- df %>% plot_ly(x = ~date, y = ~rsi, type = 'scatter', mode = 'lines', name = 'RSI') %>%
add_lines(x = ~date, y = 30,
line = list(color = "lightblue", width = 2),
showlegend = FALSE) %>%
add_lines(x = ~date, y = 70,
line = list(color = "lightblue", width = 2),
showlegend = FALSE)
#Subplots:
crypto_plot <- subplot(plot1, plot2, nrows = 2, shareX = TRUE, heights = c(0.7, 0.3)) %>%
layout(title = paste0("Price of ", crypto_pair),
xaxis = list(title = "\n Date"),
yaxis = list(title = "Closing Price \n"),
autosize = TRUE, width = 900, height = 600)
return(crypto_plot)
}
produce_crypto_chart(crypto_pair = 'ETHUSDT', timeframe = 'daily', rsi_timeframe = 14)
setwd("C:/Users/DKu_7/Documents/dkmathstats_site")
