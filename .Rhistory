axis.title.y = element_text(face="bold", colour="brown", size = 12))
# Time Series Data Practice:
library(tseries)
# Import .csv from online source:
url <- "https://vincentarelbundock.github.io/Rdatasets/csv/datasets/UKDriverDeaths.csv"
uk_drivers <- data.frame(read.csv(url, header = TRUE))
head(uk_drivers)
# Remove the first column which is X:
uk_drivers <- uk_drivers[, -1]
# Define variables:
Y <- uk_drivers$UKDriverDeaths
t <- uk_drivers$time
t <- ts(t)
# Summary statistics:
summary(Y); summary(t)
# Plots:
plot(t, Y, xlab = "Time", ylab = "UK Driver Deaths", main = "Time Series Plot")
plot(diff(Y), main = "Differenced Time Series Plot") # hmm.
#---------------
# Dickey-Fuller Test (At 5% significance level):
adf.test(Y, alternative = "stationary", k = 0) # p-value less than 0.05, stationary.
# Augmented Dickey-Fuller test
adf.test(Y, alternative="stationary") # p-value less than 0.05, stationary.
# Dickey-Fuller tests on differenced variable:
adf.test(diff(Y), alternative="stationary") # p-value less than 0.05, stationary.
#---------------
# Autocorrelation function (ACF) & Partial ACF (PACF):
par(mfrow = c(1, 2))
acf(Y); pacf(Y)
# ACF and PACF on differences:
par(mfrow = c(1, 2))
acf(diff(Y)); pacf(diff(Y))
install.packages("tseries")
# Time Series Data Practice:
library(tseries)
# Import .csv from online source:
url <- "https://vincentarelbundock.github.io/Rdatasets/csv/datasets/UKDriverDeaths.csv"
uk_drivers <- data.frame(read.csv(url, header = TRUE))
head(uk_drivers)
# Remove the first column which is X:
uk_drivers <- uk_drivers[, -1]
# Define variables:
Y <- uk_drivers$UKDriverDeaths
t <- uk_drivers$time
t <- ts(t)
# Summary statistics:
summary(Y); summary(t)
# Plots:
plot(t, Y, xlab = "Time", ylab = "UK Driver Deaths", main = "Time Series Plot")
plot(diff(Y), main = "Differenced Time Series Plot") # hmm.
#---------------
# Dickey-Fuller Test (At 5% significance level):
adf.test(Y, alternative = "stationary", k = 0) # p-value less than 0.05, stationary.
# Augmented Dickey-Fuller test
adf.test(Y, alternative="stationary") # p-value less than 0.05, stationary.
# Dickey-Fuller tests on differenced variable:
adf.test(diff(Y), alternative="stationary") # p-value less than 0.05, stationary.
#---------------
# Autocorrelation function (ACF) & Partial ACF (PACF):
par(mfrow = c(1, 2))
acf(Y); pacf(Y)
# ACF and PACF on differences:
par(mfrow = c(1, 2))
acf(diff(Y)); pacf(diff(Y))
#---------------
2^5
stock.prices <- c(23,27,23,21,34)
stock.prices
names(stock.prices) <- c("Mon", "Tue", "wed", "Thurs", "Fri")
stock.prices
mean(stock.prices)
over.23 <- stock.prices > 23
over.23
stock.prices[over.23]
max(stock.prices)
max(names(stock.prices))
A <- c(1, 2, 3)
B <- c(4, 5, 6)
rbind(A, B)
mat <- matrix(1:9, nrow = 3)
mat
as.matrix(mat)
is.matrix(mat)
mat <- matrix(1:25, nrow = 5, byrow = TRUE)
mat
mat[2:3, 2:3]
mat[4:5, 4:5]
sum(mat)
?runif
matrix(runif(n = 20), nrow = 4, ncol = 5))
matrix(runif(n = 20), nrow = 4, ncol = 5)
ages <- c(22, 25, 26)
weight <- c(150, 165, 120)
sex <- c("M", "M", "F")
df <- data.frame(Age = ages, Weight = weight, Sex = sex)
df
rownames(df) <- c("Sam", "Frank", "Amy")
df
is.data.frame(mtcars)
mat <- matrix(1:25,nrow = 5)
mat
as.data.frame(mat)
df <- mtcars
df.head(6)
head(df, 6)
mean(df['mpg'])
mean(df[:,'mpg'])
df['mpg']
mean(df$mpg)
mean(df[mpg])
mean(df['mpg'])
mean(df$mpg)
df[df$cyl == 6]
df$cyl == 6
df[df$cyl == 6, :]
df[df$cyl == 6, ]
df[, c("am", "gear", "carb")]
df$performance <- df$hp/df$wt
head(df)
df$performance <- round(df$performance, 2)
head(df)
df$mpg["Hornet Sportabout"]
df["Hornet Sportabout", ]
df["Hornet Sportabout", "mpg"]
df[df$hp > 100 & df$wt > 2.5, ]
mean(df[df$hp > 100 & df$wt > 2.5, "mpg"]
)
#### Example Four (BMIs):
# Reference: https://www.nhlbi.nih.gov/health/educational/lose_wt/BMI/bmicalc.htm?source=quickfitnesssolutions
bmis <- c(17, 21.4, 18.2, 28.1, 30.6, 32.1, 22.3, 21, 23.2, 25.7, 31.7, 19.9, 26.2, 27.8)
bmis_df <- data.frame(Body_Mass_Index = bmis)
# Assign BMI number to status condition with a function
bmi_status <- function(bmi){
if(bmi < 18.5){
return("Underweight")
} else if (bmi >= 18.5 & bmi <= 24.9){
return("Normal Weight")
} else if (bmi >= 18.5 & bmi <= 24.9){
return("Normal Weight")
} else if (bmi >= 25 & bmi <= 29.9){
return("Overweight")
} else {
return("Obese")
}
}
# Using sapply to determine weight status given a BMI score in bmi column.
bmis_df$Status <- sapply(bmis_df$Body_Mass_Index, bmi_status)
# View/Check
bmis_df
# sapply Functions In R With Examples
# sapply(column, function)
library(ggplot2) # For plotting
#### Example One:
# Create dataframe:
df <- data.frame(x = 1:10)
# Function for x^2:
x_squared <- function(x){
return(x^2)
}
# Change second column from xvalues to its squared values with sapply:
df$y <- sapply(df$x, x_squared)
# View dataframe:
df
library(caTools)
library(ggplot2)
library(dplyr)
library(faraway)
data(faraway)
hprices <- hprice
# Preview data:
head(hprices)
str(hprices)
summary(hprices)
hprices$year <- hprices$year + 1985
hprices$year <- sapply(hprices$year,  function{x}{x + 1985})
hprices$year <- sapply(hprices$year,  function(x){x + 1985})
hprices <- data.frame(hprice)
# Preview data:
head(hprices)
str(hprices)
summary(hprices)
# Housing prices dataset from faraway library:
hprices <- data.frame(hprice)
# Preview data:
head(hprices)
str(hprices)
summary(hprices)
# Fix year column go from 1 to 9 to years 1986 to 1994:
hprices$time <- sapply(hprices$time,function(x){x + 1985})
head(hprices)
# Fix year column go from 1 to 9 to years 1986 to 1994:
hprices$time <- sapply(hprices$time,function(x){x + 1985})
names(hprices$time) <- "Year"
head(hprices)
colnames(hprices$time) <- "Year"
colnames(hprices)
# Linear Regression - Machine Learning Way
# Reference : Udemy Course - Data Science & Machine Learning Bootcamp With R
#             By Jose Portilla
library(caTools)
library(ggplot2)
library(dplyr)
library(faraway)
# Housing prices dataset from faraway library:
hprices <- data.frame(hprice)
# Preview data:
head(hprices)
str(hprices)
summary(hprices)
# Fix year column go from 1 to 9 to years 1986 to 1994:
hprices$time <- sapply(hprices$time,function(x){x + 1985})
# Fix column name time to Year
colnames(hprices) <- c("narsp", "ypc", "perypc", "regtest", "rcdum", "ajwtr", "msa", "Year")
head(hprices)
hprices$Year <- factor(hprices$Year)
head(hprices)
str(hprices)
ggplot(data = hprices, aes(x = ypc, y = narsp)) +
geom_point()
exp(5)
# Convert Natural Log Avg. Sale Price In Thousands (narsp) To Actual Sale Price:
hprices$Prices <- sapply(hprices$narsp, function(x){1000*exp(x)})
head(hprices)
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point()
# Compare Average Per Capita Income (ypc) To Natural Log Avg. Sale Price In Thousands (narsp):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red")
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4)
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = " \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(~ Year)
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year)
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(rows = vars(Year))
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(rows = vars(Year)) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(Year ~ .) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = theme_text(angle = 90))
# Linear Regression - Machine Learning Way
# References : Udemy Course - Data Science & Machine Learning Bootcamp With R
#             By Jose Portilla
#             https://ggplot2.tidyverse.org/reference/facet_grid.html
#             https://stackoverflow.com/questions/1330989/rotating-and-spacing-axis-labels-in-ggplot2
library(caTools)
library(ggplot2)
library(dplyr)
library(faraway)
# Housing prices dataset from faraway library:
hprices <- data.frame(hprice)
# Preview data:
head(hprices)
str(hprices)
summary(hprices)
# Fix year column go from 1 to 9 to years 1986 to 1994:
hprices$time <- sapply(hprices$time,function(x){x + 1985})
# Fix column name time to Year
colnames(hprices) <- c("narsp", "ypc", "perypc", "regtest", "rcdum", "ajwtr", "msa", "Year")
# Turn the year into a factor variable:
hprices$Year <- factor(hprices$Year)
# Convert Natural Log Avg. Sale Price In Thousands (narsp) To Average Sale Price:
hprices$Prices <- sapply(hprices$narsp, function(x){1000*exp(x)})
###---------------
# Exploratory Data Analysis
###---------------
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = theme_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = theme_text(angle = 90))
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "green", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "darkgreen", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
data
data <- data.frame()
data2 <- edit(data)
library(tidyr)
library(dplyr)
data2
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
US_spend <- as.data.frame(USPersonalExpenditure)
head(US_spend)
colnames(US_spend) <- c("1940", "1945", "1950", "1955", "1960")
US_spend <- as.data.frame(cbind(US_spend, Category = rownames(US_spend)))
US_spend_long <- gather(US_spend, "Year", "Personal Expenditure", 1:5)
head(US_spend_long); dim(US_spend_long)
# Creating sample data:
# 1 is male, 2 is female
library(tidyr)
treat_gender <- c("A_1", "A_2", "B_1", "B_2")
Count <- c(3, 8 , 10, 6)
sample <- data.frame(treat_gender, Count)
sample
# Seprate column treat_gender into Treatment and Gender columns:
data <- separate(sample, treat_gender, c("Treatment", "Gender"), sep = "_")
# Change the 1 to Male and the 2 cases to Female
data$Gender[data$Gender == 1] <- "Male"
data$Gender[data$Gender == 2] <- "Female"
data
group_by(data2, "IP")
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
spread(data_sep, "IP", )
library(tidyr)
library(dplyr)
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
library(faraway)
library(tidyr)
suicide_data <- suicide
head(suicide_data)
suicide_wide <- spread(suicide_data, sex, y)
suicide_wide
data_sep
group_by(data_sep, "IP")
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
test1 <- spread(data_sep, "IP")
group_by(test1, IP )
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
test1 <- spread(data_sep, "IP")
spread(data_sep, IP)
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
group_by(data_sep, IP )
group_by(data_sep, IP) %>% summarise(Port = paste(year, collapse=", "))
group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=", "))
group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
test1 <- group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
test1[1, :] <- unique(test[1: ])
test1[1, :] <- unique(test[1, : ])
unique(c(2, 2, 1))
sapply(test1$Port, unique)
# Remove duplicates with sapply()
test1$Port <- sapply(test1$Port, unique)
test1
test1 <- group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
# Remove duplicates with sapply()
test1$Port <- sapply(test1$Port, unique)
test1$Port
test1
unique(test1[c("IP", "Port")])
str(test1)
as.numeric(test1$Port)
data2
test1 <- group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
test1
install.packages("reticulate")
library(reticulate)
library(reticulate)
library(reticulate)
import pandas as pd
import numpy as np
import seaborn as sb
meow = np.array([[-1,1,1],[1,1,-1],[1,1,1]])
print(meow)
food_choices <- c("Pizza", "Pasta", "Sushi", "Caesar Salad")
counts <- c(17, 10, 8, 11)
table <- data.frame(food_choices, counts) # Create data frame
# Check table:
table
# Check structure of table:
str(table)
# Total Counts In Survey:
total_count <- sum(table[,2])
total_count
## Base R Pie Chart With Labels:
pie(table[, 2], labels = table[,1],
col = c("Blue", "Red", "Green", "Orange"),
main = "Favourite Foods Survey")
library(ggplot2)
# Why Barplot Is Not A Good Visual:
ggplot(table, aes(x = "", y = Count, fill = Food)) +
geom_bar(width = 1, stat = "identity")
# Why Barplot Is Not A Good Visual:
ggplot(table, aes(x = "", y = counts, fill = Food)) +
geom_bar(width = 1, stat = "identity")
# Why Barplot Is Not A Good Visual:
ggplot(table, aes(x = "", y = counts, fill = food_choices)) +
geom_bar(width = 1, stat = "identity")
install.packages("moments")
library(devtools)
install_github("knitron", "fhirschmann")
install.packages("devtools")
library(devtools)
install_github("knitron", "fhirschmann")
setwd("~/dkmathstats_site")
rmarkdown::render_site()
