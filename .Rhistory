str(hprices)
summary(hprices)
hprices$year <- hprices$year + 1985
hprices$year <- sapply(hprices$year,  function{x}{x + 1985})
hprices$year <- sapply(hprices$year,  function(x){x + 1985})
hprices <- data.frame(hprice)
# Preview data:
head(hprices)
str(hprices)
summary(hprices)
# Housing prices dataset from faraway library:
hprices <- data.frame(hprice)
# Preview data:
head(hprices)
str(hprices)
summary(hprices)
# Fix year column go from 1 to 9 to years 1986 to 1994:
hprices$time <- sapply(hprices$time,function(x){x + 1985})
head(hprices)
# Fix year column go from 1 to 9 to years 1986 to 1994:
hprices$time <- sapply(hprices$time,function(x){x + 1985})
names(hprices$time) <- "Year"
head(hprices)
colnames(hprices$time) <- "Year"
colnames(hprices)
# Linear Regression - Machine Learning Way
# Reference : Udemy Course - Data Science & Machine Learning Bootcamp With R
#             By Jose Portilla
library(caTools)
library(ggplot2)
library(dplyr)
library(faraway)
# Housing prices dataset from faraway library:
hprices <- data.frame(hprice)
# Preview data:
head(hprices)
str(hprices)
summary(hprices)
# Fix year column go from 1 to 9 to years 1986 to 1994:
hprices$time <- sapply(hprices$time,function(x){x + 1985})
# Fix column name time to Year
colnames(hprices) <- c("narsp", "ypc", "perypc", "regtest", "rcdum", "ajwtr", "msa", "Year")
head(hprices)
hprices$Year <- factor(hprices$Year)
head(hprices)
str(hprices)
ggplot(data = hprices, aes(x = ypc, y = narsp)) +
geom_point()
exp(5)
# Convert Natural Log Avg. Sale Price In Thousands (narsp) To Actual Sale Price:
hprices$Prices <- sapply(hprices$narsp, function(x){1000*exp(x)})
head(hprices)
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point()
# Compare Average Per Capita Income (ypc) To Natural Log Avg. Sale Price In Thousands (narsp):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red")
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4)
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = " \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(~ Year)
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year)
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(rows = vars(Year))
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(rows = vars(Year)) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(Year ~ .) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = theme_text(angle = 90))
# Linear Regression - Machine Learning Way
# References : Udemy Course - Data Science & Machine Learning Bootcamp With R
#             By Jose Portilla
#             https://ggplot2.tidyverse.org/reference/facet_grid.html
#             https://stackoverflow.com/questions/1330989/rotating-and-spacing-axis-labels-in-ggplot2
library(caTools)
library(ggplot2)
library(dplyr)
library(faraway)
# Housing prices dataset from faraway library:
hprices <- data.frame(hprice)
# Preview data:
head(hprices)
str(hprices)
summary(hprices)
# Fix year column go from 1 to 9 to years 1986 to 1994:
hprices$time <- sapply(hprices$time,function(x){x + 1985})
# Fix column name time to Year
colnames(hprices) <- c("narsp", "ypc", "perypc", "regtest", "rcdum", "ajwtr", "msa", "Year")
# Turn the year into a factor variable:
hprices$Year <- factor(hprices$Year)
# Convert Natural Log Avg. Sale Price In Thousands (narsp) To Average Sale Price:
hprices$Prices <- sapply(hprices$narsp, function(x){1000*exp(x)})
###---------------
# Exploratory Data Analysis
###---------------
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = theme_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = theme_text(angle = 90))
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (Across All Years):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "red", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "green", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
# Compare Average Per Capita Income (ypc) To AVerage Sale Price (For Each Year):
ggplot(data = hprices, aes(x = ypc, y = Prices)) +
geom_point(col = "darkgreen", alpha = 0.4) +
facet_grid(. ~ Year) +
labs(x = "\n Average Income Per Capita", y = "Average Sale Price \n", title = "Standard Normal Distribution \n") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="blue", size = 12),
axis.title.y = element_text(face="bold", colour="blue", size = 12),
axis.text.x = element_text(angle = 90))
data
data <- data.frame()
data2 <- edit(data)
library(tidyr)
library(dplyr)
data2
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
US_spend <- as.data.frame(USPersonalExpenditure)
head(US_spend)
colnames(US_spend) <- c("1940", "1945", "1950", "1955", "1960")
US_spend <- as.data.frame(cbind(US_spend, Category = rownames(US_spend)))
US_spend_long <- gather(US_spend, "Year", "Personal Expenditure", 1:5)
head(US_spend_long); dim(US_spend_long)
# Creating sample data:
# 1 is male, 2 is female
library(tidyr)
treat_gender <- c("A_1", "A_2", "B_1", "B_2")
Count <- c(3, 8 , 10, 6)
sample <- data.frame(treat_gender, Count)
sample
# Seprate column treat_gender into Treatment and Gender columns:
data <- separate(sample, treat_gender, c("Treatment", "Gender"), sep = "_")
# Change the 1 to Male and the 2 cases to Female
data$Gender[data$Gender == 1] <- "Male"
data$Gender[data$Gender == 2] <- "Female"
data
group_by(data2, "IP")
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
spread(data_sep, "IP", )
library(tidyr)
library(dplyr)
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
library(faraway)
library(tidyr)
suicide_data <- suicide
head(suicide_data)
suicide_wide <- spread(suicide_data, sex, y)
suicide_wide
data_sep
group_by(data_sep, "IP")
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
test1 <- spread(data_sep, "IP")
group_by(test1, IP )
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
test1 <- spread(data_sep, "IP")
spread(data_sep, IP)
data_sep <- separate(data2, c("Port"), into = c("col1", "col2", "col3"), sep = ",")
data_sep
group_by(data_sep, IP )
group_by(data_sep, IP) %>% summarise(Port = paste(year, collapse=", "))
group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=", "))
group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
test1 <- group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
test1[1, :] <- unique(test[1: ])
test1[1, :] <- unique(test[1, : ])
unique(c(2, 2, 1))
sapply(test1$Port, unique)
# Remove duplicates with sapply()
test1$Port <- sapply(test1$Port, unique)
test1
test1 <- group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
# Remove duplicates with sapply()
test1$Port <- sapply(test1$Port, unique)
test1$Port
test1
unique(test1[c("IP", "Port")])
str(test1)
as.numeric(test1$Port)
data2
test1 <- group_by(data2, IP) %>% summarise(Port = paste(Port, collapse=","))
test1
install.packages("reticulate")
library(reticulate)
library(reticulate)
library(reticulate)
import pandas as pd
import numpy as np
import seaborn as sb
meow = np.array([[-1,1,1],[1,1,-1],[1,1,1]])
print(meow)
food_choices <- c("Pizza", "Pasta", "Sushi", "Caesar Salad")
counts <- c(17, 10, 8, 11)
table <- data.frame(food_choices, counts) # Create data frame
# Check table:
table
# Check structure of table:
str(table)
# Total Counts In Survey:
total_count <- sum(table[,2])
total_count
## Base R Pie Chart With Labels:
pie(table[, 2], labels = table[,1],
col = c("Blue", "Red", "Green", "Orange"),
main = "Favourite Foods Survey")
library(ggplot2)
# Why Barplot Is Not A Good Visual:
ggplot(table, aes(x = "", y = Count, fill = Food)) +
geom_bar(width = 1, stat = "identity")
# Why Barplot Is Not A Good Visual:
ggplot(table, aes(x = "", y = counts, fill = Food)) +
geom_bar(width = 1, stat = "identity")
# Why Barplot Is Not A Good Visual:
ggplot(table, aes(x = "", y = counts, fill = food_choices)) +
geom_bar(width = 1, stat = "identity")
install.packages("moments")
library(devtools)
install_github("knitron", "fhirschmann")
install.packages("devtools")
library(devtools)
install_github("knitron", "fhirschmann")
library(faraway)
# If you need to install Quandl:
# install.packages("Quandl")
# Loading Financial data With Quandl:
library(Quandl)
library(ggplot2)
library(plotly)
library(dplyr)
# Helpful Youtube guide: https://www.youtube.com/watch?v=qg5alOoczNo
# https://www.quandl.com/tools/r
# Authorization (Set your own API key):
Quandl.api_key("A7CUbSQwdYgJcFLdpQcR")
### Look at some data:
# 1)
clarkson_ny_prices <- Quandl("ZILLOW/C3821_ZHVITT")
# Preview data:
head(clarkson_ny_prices)
tail(clarkson_ny_prices)
# A simple plotly Plot:
plot_ly(data = clarkson_ny_prices, x = ~Date, y = ~Value) %>%
add_lines(y = clarkson_ny_prices$Value) %>%
layout(xaxis = list(title = "\n Date", titlefont = "Courier New, monospace"),
yaxis = list(title = "Price \n",
titlefont = "Courier New, monospace"),
title = "Zillow's Home Value Index For Clarkson, NY \n")
#------------------------
# 2) Platinum Prices From Johnson Matthey Database:
plat_prices <- Quandl("JOHNMATT/PLAT")
head(plat_prices)
tail(plat_prices)
# Rename columns:
colnames(plat_prices) <- c("Date", "HK_0830", "HK_1400", "LDN_0800", "NY_0930", "NY_1500")
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
geom_line(aes(y = HK_1400), col = "green") +
geom_line(aes(y = LDN_0800), col = "red") +
geom_line(aes(y = NY_0930), col = "blue") +
geom_line(aes(y = NY_1500), col = "brown") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# If you need to install Quandl:
# install.packages("Quandl")
# Loading Financial data With Quandl:
library(Quandl)
library(ggplot2)
library(plotly)
library(dplyr)
# Helpful Youtube guide: https://www.youtube.com/watch?v=qg5alOoczNo
# https://www.quandl.com/tools/r
# Authorization (Set your own API key):
Quandl.api_key("A7CUbSQwdYgJcFLdpQcR")
### Look at some data:
# 1)
clarkson_ny_prices <- Quandl("ZILLOW/C3821_ZHVITT")
# Preview data:
head(clarkson_ny_prices)
tail(clarkson_ny_prices)
# A simple plotly Plot:
plot_ly(data = clarkson_ny_prices, x = ~Date, y = ~Value) %>%
add_lines(y = clarkson_ny_prices$Value) %>%
layout(xaxis = list(title = "\n Date", titlefont = "Courier New, monospace"),
yaxis = list(title = "Price \n",
titlefont = "Courier New, monospace"),
title = "Zillow's Home Value Index For Clarkson, NY \n")
#------------------------
# 2) Platinum Prices From Johnson Matthey Database:
plat_prices <- Quandl("JOHNMATT/PLAT")
head(plat_prices)
tail(plat_prices)
# Rename columns:
colnames(plat_prices) <- c("Date", "HK_0830", "HK_1400", "LDN_0800", "NY_0930")
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
geom_line(aes(y = HK_1400), col = "green") +
geom_line(aes(y = LDN_0800), col = "red") +
geom_line(aes(y = NY_0930), col = "blue") +
geom_line(aes(y = NY_1500), col = "brown") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# If you need to install Quandl:
# install.packages("Quandl")
# Loading Financial data With Quandl:
library(Quandl)
library(ggplot2)
library(plotly)
library(dplyr)
# Helpful Youtube guide: https://www.youtube.com/watch?v=qg5alOoczNo
# https://www.quandl.com/tools/r
# Authorization (Set your own API key):
Quandl.api_key("A7CUbSQwdYgJcFLdpQcR")
### Look at some data:
# 1)
clarkson_ny_prices <- Quandl("ZILLOW/C3821_ZHVITT")
# Preview data:
head(clarkson_ny_prices)
tail(clarkson_ny_prices)
# A simple plotly Plot:
plot_ly(data = clarkson_ny_prices, x = ~Date, y = ~Value) %>%
add_lines(y = clarkson_ny_prices$Value) %>%
layout(xaxis = list(title = "\n Date", titlefont = "Courier New, monospace"),
yaxis = list(title = "Price \n",
titlefont = "Courier New, monospace"),
title = "Zillow's Home Value Index For Clarkson, NY \n")
#------------------------
# 2) Platinum Prices From Johnson Matthey Database:
plat_prices <- Quandl("JOHNMATT/PLAT")
head(plat_prices)
tail(plat_prices)
# Rename columns:
colnames(plat_prices) <- c("Date", "HK_0830", "HK_1400", "LDN_0800", "NY_0930")
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
# ggplot Lines (Considering all prices/columns)
ggplot(plat_prices, aes(x = Date)) +
geom_line(aes(y = HK_0830), col = "black") +
geom_line(aes(y = HK_1400), col = "green") +
geom_line(aes(y = LDN_0800), col = "red") +
geom_line(aes(y = NY_0930), col = "blue") +
scale_x_date(date_breaks = "1 year", date_labels = "%h %Y") +
labs(x = "\n Date", y = "Closing Price \n",
title = "\n Platinum Prices \n ") +
theme(plot.title = element_text(hjust = 0.5),
axis.title.x = element_text(face="bold", colour="#FF7A33", size = 12),
axis.title.y = element_text(face="bold", colour="#FF7A33", size = 12),
axis.text.x = element_text(angle = 90, vjust = 0.15, hjust = 1),
panel.grid.major = element_blank())
setwd("~/dkmathstats_site")
rmarkdown::render_site()
